{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNM9IuyWzt0vYD8yXpcuoAv",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/weathon/3d2smile/blob/main/efficientnetv2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install torchinfo"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z11lB5Jhy8U5",
        "outputId": "106a72b9-65e3-4972-a94d-cb29e554fef3"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting torchinfo\n",
            "  Downloading torchinfo-1.8.0-py3-none-any.whl (23 kB)\n",
            "Installing collected packages: torchinfo\n",
            "Successfully installed torchinfo-1.8.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "M5pxeSf6xSw4"
      },
      "outputs": [],
      "source": [
        "import torch, torchvision"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "efficientnetv2 = torchvision.models.efficientnet_v2_s(weights='DEFAULT')"
      ],
      "metadata": {
        "id": "7k-gjPsZyVKy"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from torchinfo import summary\n",
        "summary(efficientnetv2.features, (1,3,400,400), depth=10)"
      ],
      "metadata": {
        "id": "pY_oCohNy68i"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "if torch.cuda.is_available():\n",
        "    device = torch.device('cuda:0')\n",
        "else:\n",
        "    device = torch.device('cpu')\n",
        "\n",
        "def PE(length, depth):\n",
        "  depth = depth/2\n",
        "\n",
        "  positions = torch.arange(length)[:, np.newaxis]     # (seq, 1)\n",
        "  depths = torch.arange(depth)[np.newaxis, :]/depth   # (1, depth)\n",
        "\n",
        "  angle_rates = 1 / (10000**depths)         # (1, depth)\n",
        "  angle_rads = positions * angle_rates      # (pos, depth)\n",
        "\n",
        "  pos_encoding = torch.cat(\n",
        "      (torch.sin(angle_rads), torch.cos(angle_rads)), dim=1)\n",
        "  return pos_encoding.to(device)\n",
        "\n",
        "\n",
        "class ImageEncoder(torch.nn.Module):\n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "    self.eff = efficientnetv2.features\n",
        "\n",
        "    self.mlp = torch.nn.Sequential(\n",
        "        torch.nn.Linear(1280,1280*2),\n",
        "        torch.nn.GELU(),\n",
        "        torch.nn.Dropout(0.2),\n",
        "        torch.nn.Linear(1280*2, 1280),\n",
        "        torch.nn.GELU(),\n",
        "    ).to(device)\n",
        "    self.mha = torch.nn.MultiheadAttention(1280, 8, dropout = 0.1).to(device)\n",
        "    self.norm1 = torch.nn.BatchNorm1d(169).to(device)\n",
        "    self.norm2 = torch.nn.BatchNorm1d(169).to(device)\n",
        "    self.projection = torch.nn.Linear(1280,512)\n",
        "  def forward(self, images):\n",
        "    features = self.eff(images)\n",
        "    features = torch.flatten(features, start_dim=2, end_dim=3)\n",
        "    features = torch.permute(features, (0, 2, 1))\n",
        "    pos = PE(169, 1280)\n",
        "    features = pos + features\n",
        "    att = self.mha(features, features, features, need_weights=False)[0]\n",
        "    att = self.norm1(att + features)\n",
        "    return self.projection(self.norm2(self.mlp(att) + features))\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "6m-LdRLWzxvR"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "inp_img = torch.tensor(np.random.uniform(size=(1,3,400,400)), dtype=torch.float32).to(device)\n",
        "encoder = ImageEncoder()\n",
        "encoder(inp_img).shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R0PgUxFl0tlR",
        "outputId": "d51e97ca-65b1-4b68-89e3-b522a2cb27af"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([1, 169, 512])"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    }
  ]
}